name: Publish to PyPi

# RELEASE PROCESS
#
# === Manual activities ===
#
# 1. Document human readable changes in CHANGELOG
# 2. Bump package version using poetry version <major|minor|patch|specific version>
# 3. Merge version changes to develop branch
# 4. Edit the current draft release notes
# 5. If not already set, use `v<new version>` as a tag, and select develop as target branch
#
# === Automated activities ===
#
# 1. Extract release notes tag that was published
# 2. Ensure release notes tag match what's in CHANGELOG and pyproject
# 3. Run tests, linting, security and complexity base line
# 4. Publish package to PyPi test repository
# 5. Publish package to PyPi prod repository
# 6. Kick off Lambda Layer pipeline to publish latest version with minimal dependencies as a SAR App
# 7. Kick off Lambda Layer pipeline to publish latest version with extra dependencies as a SAR App
# 8. Builds a fresh version of docs including Changelog updates
# 9. Push latest release source code to master using release title as the commit message
# 10. Builds latest documentation for new release, and update latest alias pointing to the new release tag

on:
  push:
    branches:
      - release
  pull_request:
    branches:
      - release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set release notes tag
      run: |
        export RELEASE_TAG_VERSION=${{ github.event.release.tag_name }}
        echo "RELEASE_TAG_VERSION=${RELEASE_TAG_VERSION:1}" >> $GITHUB_ENV
    - name: Ensure new version is also set in pyproject and CHANGELOG
      run: |
        grep --regexp "\[${RELEASE_TAG_VERSION}\]" CHANGELOG.md
        grep --regexp "version \= \"${RELEASE_TAG_VERSION}\"" pyproject.toml
    - name: Install dependencies
      run: make install
    - name: Run all tests, linting and baselines
      run: make test
    - name: Build python package and wheel
      run: make build
    - name: Upload to PyPi prod
      run: make release-prod
      env:
        PYPI_USERNAME: __token__
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
    
  sync_master:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Sync master from detached head
      # If version matches CHANGELOG and pyproject.toml
      # If it passes all checks, successfully releases to test and prod
      # Then sync up master with latest source code release
      # where commit message will be Release notes title
      run: git push origin HEAD:refs/heads/master --force
